// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id              String         @id @default(auto()) @map("_id") @db.ObjectId
    name            String?
    email           String?        @unique
    image           String?
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    followingIds    String[]       @db.ObjectId
    hasNotification Boolean?
    liked           Like[]
    posts           Post[]
    comments        Comment[]
    notifications   Notification[]
}

model Post {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    body      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    userId    String    @db.ObjectId
    image     String?
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    comments  Comment[]
    liked     Like[]
}

model Like {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt   DateTime @default(now())
    likedById   String   @db.ObjectId
    likedPostId String   @db.ObjectId
    user        User     @relation(fields: [likedById], references: [id], onDelete: Cascade)
    post        Post     @relation(fields: [likedPostId], references: [id], onDelete: Cascade)
}

model Comment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    body      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @db.ObjectId
    postId    String   @db.ObjectId

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    body      String
    userId    String   @db.ObjectId
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
